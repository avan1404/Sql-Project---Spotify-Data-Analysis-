--- Retrieve the names of all tracks that have more than 1 billion streams
SELECT track, stream FROM Spotify 
WHERE stream > 1000000000

--- List all albums along with their respective artists
SELECT distinct album, artist  FROM Spotify;

--- Get the total number of comments for tracks where licensed = TRUE
SELECT SUM(comments) as total_comments FROM Spotify
WHERE licensed = TRUE

--- Find all tracks that belong to the album type single
SELECT DISTINCT track FROM Spotify
WHERE album_type = 'single'

--- Count the total number of tracks by each artist
SELECT COUNT(track),artist FROM Spotify
GROUP BY artist
ORDER BY 1

--- Calculate the average danceability of tracks in each album
SELECT AVG(danceability), album FROM Spotify
GROUP BY album

--- Find the top 5 tracks with the highest energy values
SELECT track, energy FROM Spotify
ORDER BY energy DESC 
LIMIT 5

--List all tracks along with their views and likes where official_video = TRUE
SELECT track, views, likes FROM Spotify
WHERE official_video = TRUE 

--For each album, calculate the total views of all associated tracks.
SELECT SUM(views) as total_view, album, track FROM Spotify 
GROUP BY album , track  
ORDER BY 1 DESC

--Retrieve the track names that have been streamed on Spotify more than YouTube
SELECT * FROM 
(SELECT track,
COALESCE(SUM(CASE WHEN most_played_on = 'Youtube' THEN stream END),0) as Streamed_on_YT,
COALESCE(SUM(CASE WHEN most_played_on = 'Spotify' THEN stream END),0) as Streamed_on_Spotify
FROM Spotify
GROUP BY 1
)
as t1
WHERE Streamed_on_Spotify > Streamed_on_YT
AND Streamed_on_YT <> 0 

--- Find the top 3 most-viewed tracks for each artist using window functions
WITH Rank_cte as (
SELECT artist , TRACK , views 
,dense_rank () OVER(PARTITION BY artist ORDER BY views DESC) as rank
from Spotify )
select * from Rank_cte
where rank<=3

--- Write a query to find tracks where the liveness score is above the average
WITH avg_cte as (SELECT track, album, liveness,
AVG(liveness) OVER() as avg_liv
from spotify )
SELECT * from avg_cte
WHERE liveness > avg_liv

--- Use a WITH clause to calculate the difference between the highest and lowest energy values for tracks in each album
WITH cte
AS
(SELECT 
 album,
 MAX(energy) as highest_energy,
 MIN(energy) as lowest_energery
FROM spotify
GROUP BY 1
)
SELECT 
 album,
 highest_energy - lowest_energery as energy_diff
FROM cte
ORDER BY 2 DESC


---Find tracks where the energy-to-liveness ratio is greater than 1.2
WITH ratio_cte as (SELECT track ,
(energy/liveness ) as ratio 
from Spotify)
SELECT * FROM ratio_cte
WHERE ratio > 1.2

---Calculate the cumulative sum of likes for tracks ordered by the number of views, using window functions

SELECT 
 track,
 SUM(likes) OVER (ORDER BY views) AS cumulative_sum
FROM Spotify
 ORDER BY SUM(likes) OVER (ORDER BY views) DESC ;
